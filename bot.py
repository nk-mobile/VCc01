"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
"""

import telebot
from telebot import types
import logging
from typing import Optional

from config import Config
from database import DatabaseManager
from sqlite_db import SQLiteManager
from questionnaire import QuestionnaireManager, QuestionnaireData

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager(**Config.get_db_config())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
sqlite_manager = SQLiteManager("catalog.db")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∫–µ—Ç
questionnaire_manager = None


class UserState:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self):
        self.states = {}
    
    def set_state(self, user_id: int, state: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.states[user_id] = state
    
    def get_state(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.states.get(user_id)
    
    def clear_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id in self.states:
            del self.states[user_id]
    
    def is_in_questionnaire(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—É."""
        state = self.get_state(user_id)
        return state and state.startswith('questionnaire_')


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = UserState()


def ensure_user_exists(user_id: int, username: str = None, 
                      first_name: str = None, last_name: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        first_name: –ò–º—è
        last_name: –§–∞–º–∏–ª–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    """
    user = db_manager.get_user_by_telegram_id(user_id)
    if not user:
        user_id_db = db_manager.create_user(user_id, username, first_name, last_name)
        if user_id_db:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return False
    return True


@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not ensure_user_exists(user_id, username, first_name, last_name):
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.clear_state(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è"))
    keyboard.add(types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    keyboard.add(types.KeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    bot.reply_to(message, welcome_text, reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['profile'])
def handle_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    user_id = message.from_user.id
    user = db_manager.get_user_by_telegram_id(user_id)
    
    if not user:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: {user.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üë§ –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë§ –§–∞–º–∏–ª–∏—è: {user.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± Username: @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
"""
    
    bot.reply_to(message, profile_text)


@bot.message_handler(func=lambda message: message.text == "üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è")
def handle_catalog(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è'."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not ensure_user_exists(user_id, message.from_user.username, 
                            message.from_user.first_name, message.from_user.last_name):
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ SQLite
    catalog_items = sqlite_manager.get_all_catalog_items()
    
    if not catalog_items:
        catalog_text = """
üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥—É–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    else:
        catalog_text = "üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è\n\n"
        for item in catalog_items:
            catalog_text += f"‚Ä¢ {item['description']}\n\n"
        
        catalog_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    bot.reply_to(message, catalog_text)


@bot.message_handler(func=lambda message: message.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def handle_questionnaire(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not ensure_user_exists(user_id, message.from_user.username, 
                            message.from_user.first_name, message.from_user.last_name):
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_questionnaire = db_manager.get_user_questionnaire(user_id)
    
    if existing_questionnaire:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        questionnaire_text = """
üìù –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
"""
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É"))
        keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"))
        keyboard.add(types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
        keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        
        bot.reply_to(message, questionnaire_text, reply_markup=keyboard)
        user_states.set_state(user_id, "questionnaire_menu")
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
        questionnaire_manager.start_questionnaire(user_id)
        
        questionnaire_text = """
üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.

–ù–∞—á–Ω–µ–º —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):
"""
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"))
        
        bot.reply_to(message, questionnaire_text, reply_markup=keyboard)
        user_states.set_state(user_id, "questionnaire_full_name")


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def handle_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'."""
    info_text = """
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö.

‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    bot.reply_to(message, info_text)


@bot.message_handler(func=lambda message: message.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
def handle_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'."""
    user_id = message.from_user.id
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    admin_text = """
üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
"""
    
    bot.reply_to(message, admin_text)


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
def handle_cancel_questionnaire(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    questionnaire_manager.cancel_questionnaire(user_id)
    user_states.clear_state(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è"))
    keyboard.add(types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    keyboard.add(types.KeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    bot.reply_to(message, "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.\nüè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def handle_save_questionnaire(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if questionnaire_manager.save_questionnaire(user_id):
        bot.reply_to(message, "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states.clear_state(user_id)
    handle_back_to_menu(message)


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def handle_cancel_questionnaire_review(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    questionnaire_manager.cancel_questionnaire(user_id)
    user_states.clear_state(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    handle_back_to_menu(message)


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def handle_back_to_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
    user_id = message.from_user.id
    user_states.clear_state(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–¥—É–ª—è"))
    keyboard.add(types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    keyboard.add(types.KeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    bot.reply_to(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    current_state = user_states.get_state(user_id)
    
    if current_state == "questionnaire_full_name":
        handle_questionnaire_full_name(message)
    elif current_state == "questionnaire_age":
        handle_questionnaire_age(message)
    elif current_state == "questionnaire_phone":
        handle_questionnaire_phone(message)
    elif current_state == "questionnaire_email":
        handle_questionnaire_email(message)
    elif current_state == "questionnaire_education":
        handle_questionnaire_education(message)
    elif current_state == "questionnaire_work_experience":
        handle_questionnaire_work_experience(message)
    elif current_state == "questionnaire_skills":
        handle_questionnaire_skills(message)
    elif current_state == "questionnaire_interests":
        handle_questionnaire_interests(message)
    elif current_state == "questionnaire_goals":
        handle_questionnaire_goals(message)
    elif current_state == "questionnaire_additional_info":
        handle_questionnaire_additional_info(message)
    elif current_state == "questionnaire_menu":
        handle_questionnaire_menu(message)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


def handle_questionnaire_full_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
    user_id = message.from_user.id
    full_name = message.text.strip()
    
    if len(full_name) < 2:
        bot.reply_to(message, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    questionnaire_manager.update_questionnaire_field(user_id, 'full_name', full_name)
    
    bot.reply_to(message, f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_name}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    user_states.set_state(user_id, "questionnaire_age")


def handle_questionnaire_age(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    user_id = message.from_user.id
    age_text = message.text.strip()
    
    try:
        age = int(age_text)
        if age < 1 or age > 120:
            bot.reply_to(message, "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        return
    
    questionnaire_manager.update_questionnaire_field(user_id, 'age', age)
    
    bot.reply_to(message, f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {age} –ª–µ—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    user_states.set_state(user_id, "questionnaire_phone")


def handle_questionnaire_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_id = message.from_user.id
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10:
        bot.reply_to(message, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return
    
    questionnaire_manager.update_questionnaire_field(user_id, 'phone', phone)
    
    bot.reply_to(message, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    user_states.set_state(user_id, "questionnaire_email")


def handle_questionnaire_email(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
    user_id = message.from_user.id
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
        return
    
    questionnaire_manager.update_questionnaire_field(user_id, 'email', email)
    
    bot.reply_to(message, f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
    user_states.set_state(user_id, "questionnaire_education")


def handle_questionnaire_education(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    user_id = message.from_user.id
    education = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'education', education)
    
    bot.reply_to(message, f"‚úÖ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    user_states.set_state(user_id, "questionnaire_work_experience")


def handle_questionnaire_work_experience(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã."""
    user_id = message.from_user.id
    work_experience = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'work_experience', work_experience)
    
    bot.reply_to(message, f"‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏:")
    user_states.set_state(user_id, "questionnaire_skills")


def handle_questionnaire_skills(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–æ–≤."""
    user_id = message.from_user.id
    skills = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'skills', skills)
    
    bot.reply_to(message, f"‚úÖ –ù–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
    user_states.set_state(user_id, "questionnaire_interests")


def handle_questionnaire_interests(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
    user_id = message.from_user.id
    interests = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'interests', interests)
    
    bot.reply_to(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏:")
    user_states.set_state(user_id, "questionnaire_goals")


def handle_questionnaire_goals(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π."""
    user_id = message.from_user.id
    goals = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'goals', goals)
    
    bot.reply_to(message, f"‚úÖ –¶–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    user_states.set_state(user_id, "questionnaire_additional_info")


def handle_questionnaire_additional_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    additional_info = message.text.strip()
    
    questionnaire_manager.update_questionnaire_field(user_id, 'additional_info', additional_info)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    progress = questionnaire_manager.get_questionnaire_progress(user_id)
    
    progress_text = f"""
‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {progress['percentage']}%
–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {progress['completed_fields']}/{progress['total_fields']}

–ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é!
"""
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    bot.reply_to(message, progress_text, reply_markup=keyboard)
    user_states.set_state(user_id, "questionnaire_review")


def handle_questionnaire_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    text = message.text
    
    if text == "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É":
        show_questionnaire(message)
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É":
        start_edit_questionnaire(message)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        delete_questionnaire(message)
    else:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


def show_questionnaire(message: types.Message):
    """–ü–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    questionnaire_data = db_manager.get_user_questionnaire(user_id)
    
    if not questionnaire_data:
        bot.reply_to(message, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    import json
    try:
        data = json.loads(questionnaire_data['data']) if isinstance(questionnaire_data['data'], str) else questionnaire_data['data']
        
        questionnaire_text = f"""
üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞

üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ò–º—è: {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç:
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {data.get('work_experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ù–∞–≤—ã–∫–∏: {data.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}
‚Ä¢ –¶–µ–ª–∏: {data.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}
‚Ä¢ –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('additional_info', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –°—Ç–∞—Ç—É—Å: {questionnaire_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {questionnaire_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {questionnaire_data.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
    except (json.JSONDecodeError, KeyError) as e:
        questionnaire_text = f"""
üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞

–°—Ç–∞—Ç—É—Å: {questionnaire_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–°–æ–∑–¥–∞–Ω–∞: {questionnaire_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–û–±–Ω–æ–≤–ª–µ–Ω–∞: {questionnaire_data.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã.
"""
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    
    bot.reply_to(message, questionnaire_text, reply_markup=keyboard)


def start_edit_questionnaire(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    existing_questionnaire = db_manager.get_user_questionnaire(user_id)
    if existing_questionnaire:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        questionnaire_manager.start_questionnaire(user_id)
        
        bot.reply_to(message, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        user_states.set_state(user_id, "questionnaire_full_name")
    else:
        bot.reply_to(message, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


def delete_questionnaire(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã."""
    user_id = message.from_user.id
    
    if questionnaire_manager.db_manager.delete_questionnaire(user_id):
        bot.reply_to(message, "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    handle_back_to_menu(message)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not Config.validate():
        logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db_manager.connect():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞
    if not sqlite_manager.initialize_database():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∫–µ—Ç
    global questionnaire_manager
    questionnaire_manager = QuestionnaireManager(db_manager)
    logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∫–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
        bot.polling(none_stop=True, interval=0, timeout=20)
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        db_manager.disconnect()
        sqlite_manager.disconnect()


if __name__ == "__main__":
    main()
